{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, userService) {\n      this.http = http;\n      this.userService = userService; // BASE_PATH: 'http://localhost:8080'\n\n      this.USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n      this.USER_NAME_SESSION_ATTRIBUTE_ID = 'authenticatedUserId';\n      this.username = \"\";\n      this.password = \"\";\n    }\n\n    authenticationService(username, password) {\n      let headers = new HttpHeaders({\n        Authorization: 'Basic ' + window.btoa(username + ':' + password)\n      });\n      return this.http.get('http://localhost:8081/api/v1/basicauth', {\n        headers\n      }).pipe(map(res => {\n        this.username = username;\n        this.password = password;\n        this.registerSuccessfulLogin(username, password);\n      }));\n    }\n\n    createBasicAuthToken(username, password) {\n      return 'Basic ' + window.btoa(username + \":\" + password);\n    }\n\n    registerSuccessfulLogin(username, password) {\n      sessionStorage.setItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    }\n\n    logout() {\n      sessionStorage.removeItem(this.USER_NAME_SESSION_ATTRIBUTE_ID);\n      sessionStorage.removeItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME);\n      this.username = \"\";\n      this.password = \"\";\n    }\n\n    isUserLoggedIn() {\n      let user = sessionStorage.getItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return false;\n      return true;\n    }\n\n    getLoggedInUserId() {\n      let user = sessionStorage.getItem(this.USER_NAME_SESSION_ATTRIBUTE_ID);\n      if (user === null) return '';\n      console.log(\"hi this \" + user);\n      return user;\n    }\n\n    getLoggedInUserName() {\n      let user = sessionStorage.getItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return '';\n      return user;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}