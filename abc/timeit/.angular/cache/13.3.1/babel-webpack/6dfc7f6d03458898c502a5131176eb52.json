{"ast":null,"code":"import { EventEmitter, isDevMode, Directive, Input, Output, Injectable, ɵɵdefineInjectable, Optional, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Inject, ElementRef, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinInitialized, mixinDisabled, AnimationDurations, AnimationCurves } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/common';\nconst _c0 = [\"mat-sort-header\", \"\"];\n\nfunction MatSortHeader_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1._disableViewStateAnimation = true;\n    })(\"@arrowPosition.done\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3._disableViewStateAnimation = false;\n    });\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 5);\n    ɵngcc0.ɵɵelement(3, \"div\", 6)(4, \"div\", 7)(5, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@arrowOpacity\", ctx_r0._getArrowViewState())(\"@arrowPosition\", ctx_r0._getArrowViewState())(\"@allowChildren\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"@indicator\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@leftPointer\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@rightPointer\", ctx_r0._getArrowDirectionState());\n  }\n}\n\nconst _c1 = [\"*\"];\n\nfunction getSortDuplicateSortableIdError(id) {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getSortHeaderNotContainedWithinSortError() {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getSortHeaderMissingIdError() {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\n\n\nfunction getSortInvalidDirectionError(direction) {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Interface for a directive that holds sorting state consumed by `MatSortHeader`.\n * @record\n */\n\n\nfunction MatSortable() {}\n\nif (false) {\n  /**\n   * The id of the column being sorted.\n   * @type {?}\n   */\n  MatSortable.prototype.id;\n  /**\n   * Starting sort direction.\n   * @type {?}\n   */\n\n  MatSortable.prototype.start;\n  /**\n   * Whether to disable clearing the sorting state.\n   * @type {?}\n   */\n\n  MatSortable.prototype.disableClear;\n}\n/**\n * The current sort state.\n * @record\n */\n\n\nfunction Sort() {}\n\nif (false) {\n  /**\n   * The id of the column being sorted.\n   * @type {?}\n   */\n  Sort.prototype.active;\n  /**\n   * The sort direction.\n   * @type {?}\n   */\n\n  Sort.prototype.direction;\n} // Boilerplate for applying mixins to MatSort.\n\n/**\n * \\@docs-private\n */\n\n\nclass MatSortBase {}\n/** @type {?} */\n\n\nconst _MatSortMixinBase = /*#__PURE__*/mixinInitialized( /*#__PURE__*/mixinDisabled(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\n\n\nlet MatSort = /*#__PURE__*/(() => {\n  class MatSort extends _MatSortMixinBase {\n    constructor() {\n      super(...arguments);\n      /**\n       * Collection of all registered sortables that this directive manages.\n       */\n\n      this.sortables = new Map();\n      /**\n       * Used to notify any child components listening to state changes.\n       */\n\n      this._stateChanges = new Subject();\n      /**\n       * The direction to set when an MatSortable is initially sorted.\n       * May be overriden by the MatSortable's sort start.\n       */\n\n      this.start = 'asc';\n      this._direction = '';\n      /**\n       * Event emitted when the user changes either the active sort or sort direction.\n       */\n\n      this.sortChange = new EventEmitter();\n    }\n    /**\n     * The sort direction of the currently active MatSortable.\n     * @return {?}\n     */\n\n\n    get direction() {\n      return this._direction;\n    }\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n\n\n    set direction(direction) {\n      if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n        throw getSortInvalidDirectionError(direction);\n      }\n\n      this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     * @return {?}\n     */\n\n\n    get disableClear() {\n      return this._disableClear;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set disableClear(v) {\n      this._disableClear = coerceBooleanProperty(v);\n    }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n\n\n    register(sortable) {\n      if (!sortable.id) {\n        throw getSortHeaderMissingIdError();\n      }\n\n      if (this.sortables.has(sortable.id)) {\n        throw getSortDuplicateSortableIdError(sortable.id);\n      }\n\n      this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n\n\n    deregister(sortable) {\n      this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n\n\n    sort(sortable) {\n      if (this.active != sortable.id) {\n        this.active = sortable.id;\n        this.direction = sortable.start ? sortable.start : this.start;\n      } else {\n        this.direction = this.getNextSortDirection(sortable);\n      }\n\n      this.sortChange.emit({\n        active: this.active,\n        direction: this.direction\n      });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n\n\n    getNextSortDirection(sortable) {\n      if (!sortable) {\n        return '';\n      } // Get the sort direction cycle with the potential sortable overrides.\n\n      /** @type {?} */\n\n\n      const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n      /** @type {?} */\n\n      let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear); // Get and return the next direction in the cycle\n\n      /** @type {?} */\n\n      let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n\n      if (nextDirectionIndex >= sortDirectionCycle.length) {\n        nextDirectionIndex = 0;\n      }\n\n      return sortDirectionCycle[nextDirectionIndex];\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnChanges() {\n      this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n\n  }\n\n  MatSort.ɵfac = /*@__PURE__*/function () {\n    let ɵMatSort_BaseFactory;\n    return function MatSort_Factory(t) {\n      return (ɵMatSort_BaseFactory || (ɵMatSort_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSort)))(t || MatSort);\n    };\n  }();\n\n  MatSort.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatSort,\n    selectors: [[\"\", \"matSort\", \"\"]],\n    hostAttrs: [1, \"mat-sort\"],\n    inputs: {\n      disabled: [\"matSortDisabled\", \"disabled\"],\n      start: [\"matSortStart\", \"start\"],\n      direction: [\"matSortDirection\", \"direction\"],\n      disableClear: [\"matSortDisableClear\", \"disableClear\"],\n      active: [\"matSortActive\", \"active\"]\n    },\n    outputs: {\n      sortChange: \"matSortChange\"\n    },\n    exportAs: [\"matSort\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MatSort;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  MatSort.ngAcceptInputType_disableClear;\n  /** @type {?} */\n\n  MatSort.ngAcceptInputType_disabled;\n  /**\n   * Collection of all registered sortables that this directive manages.\n   * @type {?}\n   */\n\n  MatSort.prototype.sortables;\n  /**\n   * Used to notify any child components listening to state changes.\n   * @type {?}\n   */\n\n  MatSort.prototype._stateChanges;\n  /**\n   * The id of the most recently sorted MatSortable.\n   * @type {?}\n   */\n\n  MatSort.prototype.active;\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   * @type {?}\n   */\n\n  MatSort.prototype.start;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSort.prototype._direction;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSort.prototype._disableClear;\n  /**\n   * Event emitted when the user changes either the active sort or sort direction.\n   * @type {?}\n   */\n\n  MatSort.prototype.sortChange;\n}\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\n\n\nfunction getSortDirectionCycle(start, disableClear) {\n  /** @type {?} */\n  let sortOrder = ['asc', 'desc'];\n\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n\n  return sortOrder;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * \\@docs-private\n * @type {?}\n */\n\nconst matSortAnimations = {\n  /**\n   * Animation that moves the sort indicator.\n   */\n  indicator: /*#__PURE__*/trigger('indicator', [/*#__PURE__*/state('active-asc, asc', /*#__PURE__*/style({\n    transform: 'translateY(0px)'\n  })),\n  /*#__PURE__*/\n  // 10px is the height of the sort indicator, minus the width of the pointers\n  state('active-desc, desc', /*#__PURE__*/style({\n    transform: 'translateY(10px)'\n  })), /*#__PURE__*/transition('active-asc <=> active-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation that rotates the left pointer of the indicator based on the sorting direction.\n   */\n  leftPointer: /*#__PURE__*/trigger('leftPointer', [/*#__PURE__*/state('active-asc, asc', /*#__PURE__*/style({\n    transform: 'rotate(-45deg)'\n  })), /*#__PURE__*/state('active-desc, desc', /*#__PURE__*/style({\n    transform: 'rotate(45deg)'\n  })), /*#__PURE__*/transition('active-asc <=> active-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation that rotates the right pointer of the indicator based on the sorting direction.\n   */\n  rightPointer: /*#__PURE__*/trigger('rightPointer', [/*#__PURE__*/state('active-asc, asc', /*#__PURE__*/style({\n    transform: 'rotate(45deg)'\n  })), /*#__PURE__*/state('active-desc, desc', /*#__PURE__*/style({\n    transform: 'rotate(-45deg)'\n  })), /*#__PURE__*/transition('active-asc <=> active-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation that controls the arrow opacity.\n   */\n  arrowOpacity: /*#__PURE__*/trigger('arrowOpacity', [/*#__PURE__*/state('desc-to-active, asc-to-active, active', /*#__PURE__*/style({\n    opacity: 1\n  })), /*#__PURE__*/state('desc-to-hint, asc-to-hint, hint', /*#__PURE__*/style({\n    opacity: .54\n  })), /*#__PURE__*/state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', /*#__PURE__*/style({\n    opacity: 0\n  })),\n  /*#__PURE__*/\n  // Transition between all states except for immediate transitions\n  transition('* => asc, * => desc, * => active, * => hint, * => void', /*#__PURE__*/animate('0ms')), /*#__PURE__*/transition('* <=> *', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: /*#__PURE__*/trigger('arrowPosition', [\n  /*#__PURE__*/\n  // Hidden Above => Hint Center\n  transition('* => desc-to-hint, * => desc-to-active', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(-25%)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(0)'\n  })]))),\n  /*#__PURE__*/\n  // Hint Center => Hidden Below\n  transition('* => hint-to-desc, * => active-to-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(0)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(25%)'\n  })]))),\n  /*#__PURE__*/\n  // Hidden Below => Hint Center\n  transition('* => asc-to-hint, * => asc-to-active', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(25%)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(0)'\n  })]))),\n  /*#__PURE__*/\n  // Hint Center => Hidden Above\n  transition('* => hint-to-asc, * => active-to-asc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(0)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(-25%)'\n  })]))), /*#__PURE__*/state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', /*#__PURE__*/style({\n    transform: 'translateY(0)'\n  })), /*#__PURE__*/state('hint-to-desc, active-to-desc, desc', /*#__PURE__*/style({\n    transform: 'translateY(-25%)'\n  })), /*#__PURE__*/state('hint-to-asc, active-to-asc, asc', /*#__PURE__*/style({\n    transform: 'translateY(25%)'\n  }))]),\n\n  /**\n   * Necessary trigger that calls animate on children animations.\n   */\n  allowChildren: /*#__PURE__*/trigger('allowChildren', [/*#__PURE__*/transition('* <=> *', [/*#__PURE__*/query('@*', /*#__PURE__*/animateChild(), {\n    optional: true\n  })])])\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-header-intl.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n\nlet MatSortHeaderIntl = /*#__PURE__*/(() => {\n  class MatSortHeaderIntl {\n    constructor() {\n      /**\n       * Stream that emits whenever the labels here are changed. Use this to notify\n       * components if the labels have changed after initialization.\n       */\n      this.changes = new Subject();\n      /**\n       * ARIA label for the sorting button.\n       */\n\n      this.sortButtonLabel =\n      /**\n      * @param {?} id\n      * @return {?}\n      */\n      id => {\n        return `Change sorting for ${id}`;\n      };\n    }\n\n  }\n\n  MatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) {\n    return new (t || MatSortHeaderIntl)();\n  };\n  /** @nocollapse */\n\n\n  MatSortHeaderIntl.ɵprov = ɵɵdefineInjectable({\n    factory: function MatSortHeaderIntl_Factory() {\n      return new MatSortHeaderIntl();\n    },\n    token: MatSortHeaderIntl,\n    providedIn: \"root\"\n  });\n  return MatSortHeaderIntl;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   * @type {?}\n   */\n  MatSortHeaderIntl.prototype.changes;\n  /**\n   * ARIA label for the sorting button.\n   * @type {?}\n   */\n\n  MatSortHeaderIntl.prototype.sortButtonLabel;\n}\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\n\n\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-header.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to the sort header.\n\n/**\n * \\@docs-private\n */\n\nclass MatSortHeaderBase {}\n/** @type {?} */\n\n\nconst _MatSortHeaderMixinBase = /*#__PURE__*/mixinDisabled(MatSortHeaderBase);\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * \\@docs-private\n * @record\n */\n\n\nfunction ArrowViewStateTransition() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  ArrowViewStateTransition.prototype.fromState;\n  /** @type {?} */\n\n  ArrowViewStateTransition.prototype.toState;\n}\n/**\n * Column definition associated with a `MatSortHeader`.\n * @record\n */\n\n\nfunction MatSortHeaderColumnDef() {}\n\nif (false) {\n  /** @type {?} */\n  MatSortHeaderColumnDef.prototype.name;\n}\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n\n\nlet MatSortHeader = /*#__PURE__*/(() => {\n  class MatSortHeader extends _MatSortHeaderMixinBase {\n    /**\n     * @param {?} _intl\n     * @param {?} changeDetectorRef\n     * @param {?} _sort\n     * @param {?} _columnDef\n     * @param {?=} _focusMonitor\n     * @param {?=} _elementRef\n     */\n    constructor(_intl, changeDetectorRef, _sort, _columnDef, _focusMonitor, _elementRef) {\n      // Note that we use a string token for the `_columnDef`, because the value is provided both by\n      // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n      // and we want to avoid having the sort header depending on the CDK table because\n      // of this single reference.\n      super();\n      this._intl = _intl;\n      this._sort = _sort;\n      this._columnDef = _columnDef;\n      this._focusMonitor = _focusMonitor;\n      this._elementRef = _elementRef;\n      /**\n       * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n       * provide an affordance that the header is sortable by showing on focus and hover.\n       */\n\n      this._showIndicatorHint = false;\n      /**\n       * The direction the arrow should be facing according to the current state.\n       */\n\n      this._arrowDirection = '';\n      /**\n       * Whether the view state animation should show the transition between the `from` and `to` states.\n       */\n\n      this._disableViewStateAnimation = false;\n      /**\n       * Sets the position of the arrow that displays when sorted.\n       */\n\n      this.arrowPosition = 'after';\n\n      if (!_sort) {\n        throw getSortHeaderNotContainedWithinSortError();\n      }\n\n      this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        if (this._isSorted()) {\n          this._updateArrowDirection();\n        } // If this header was recently active and now no longer sorted, animate away the arrow.\n\n\n        if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n          this._disableViewStateAnimation = false;\n\n          this._setAnimationTransitionState({\n            fromState: 'active',\n            toState: this._arrowDirection\n          });\n        }\n\n        changeDetectorRef.markForCheck();\n      });\n\n      if (_focusMonitor && _elementRef) {\n        // We use the focus monitor because we also want to style\n        // things differently based on the focus origin.\n        _focusMonitor.monitor(_elementRef, true).subscribe(\n        /**\n        * @param {?} origin\n        * @return {?}\n        */\n        origin => this._setIndicatorHintVisible(!!origin));\n      }\n    }\n    /**\n     * Overrides the disable clear value of the containing MatSort for this MatSortable.\n     * @return {?}\n     */\n\n\n    get disableClear() {\n      return this._disableClear;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set disableClear(v) {\n      this._disableClear = coerceBooleanProperty(v);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      if (!this.id && this._columnDef) {\n        this.id = this._columnDef.name;\n      } // Initialize the direction of the arrow and set the view state to be immediately that state.\n\n\n      this._updateArrowDirection();\n\n      this._setAnimationTransitionState({\n        toState: this._isSorted() ? 'active' : this._arrowDirection\n      });\n\n      this._sort.register(this);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      // @breaking-change 10.0.0 Remove null check for _focusMonitor and _elementRef.\n      if (this._focusMonitor && this._elementRef) {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n      }\n\n      this._sort.deregister(this);\n\n      this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n\n\n    _setIndicatorHintVisible(visible) {\n      // No-op if the sort header is disabled - should not make the hint visible.\n      if (this._isDisabled() && visible) {\n        return;\n      }\n\n      this._showIndicatorHint = visible;\n\n      if (!this._isSorted()) {\n        this._updateArrowDirection();\n\n        if (this._showIndicatorHint) {\n          this._setAnimationTransitionState({\n            fromState: this._arrowDirection,\n            toState: 'hint'\n          });\n        } else {\n          this._setAnimationTransitionState({\n            fromState: 'hint',\n            toState: this._arrowDirection\n          });\n        }\n      }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n\n\n    _setAnimationTransitionState(viewState) {\n      this._viewState = viewState; // If the animation for arrow position state (opacity/translation) should be disabled,\n      // remove the fromState so that it jumps right to the toState.\n\n      if (this._disableViewStateAnimation) {\n        this._viewState = {\n          toState: viewState.toState\n        };\n      }\n    }\n    /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n\n\n    _handleClick() {\n      if (this._isDisabled()) {\n        return;\n      }\n\n      this._sort.sort(this); // Do not show the animation if the header was already shown in the right position.\n\n\n      if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n        this._disableViewStateAnimation = true;\n      } // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n      // the direction it is facing.\n\n      /** @type {?} */\n\n\n      const viewState = this._isSorted() ? {\n        fromState: this._arrowDirection,\n        toState: 'active'\n      } : {\n        fromState: 'active',\n        toState: this._arrowDirection\n      };\n\n      this._setAnimationTransitionState(viewState);\n\n      this._showIndicatorHint = false;\n    }\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n\n\n    _isSorted() {\n      return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n\n\n    _getArrowDirectionState() {\n      return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n\n\n    _getArrowViewState() {\n      /** @type {?} */\n      const fromState = this._viewState.fromState;\n      return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n\n\n    _updateArrowDirection() {\n      this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _isDisabled() {\n      return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n\n\n    _getAriaSortAttribute() {\n      if (!this._isSorted()) {\n        return null;\n      }\n\n      return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /**\n     * Whether the arrow inside the sort header should be rendered.\n     * @return {?}\n     */\n\n\n    _renderArrow() {\n      return !this._isDisabled() || this._isSorted();\n    }\n\n  }\n\n  MatSortHeader.ɵfac = function MatSortHeader_Factory(t) {\n    return new (t || MatSortHeader)(ɵngcc0.ɵɵdirectiveInject(MatSortHeaderIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSort, 8), ɵngcc0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MatSortHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSortHeader,\n    selectors: [[\"\", \"mat-sort-header\", \"\"]],\n    hostAttrs: [1, \"mat-sort-header\"],\n    hostVars: 3,\n    hostBindings: function MatSortHeader_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() {\n          return ctx._handleClick();\n        })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() {\n          return ctx._setIndicatorHintVisible(true);\n        })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() {\n          return ctx._setIndicatorHintVisible(false);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      arrowPosition: \"arrowPosition\",\n      disableClear: \"disableClear\",\n      id: [\"mat-sort-header\", \"id\"],\n      start: \"start\"\n    },\n    exportAs: [\"matSortHeader\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 7,\n    consts: [[1, \"mat-sort-header-container\"], [\"type\", \"button\", 1, \"mat-sort-header-button\", \"mat-focus-indicator\"], [\"class\", \"mat-sort-header-arrow\", 4, \"ngIf\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]],\n    template: function MatSortHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"button\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, MatSortHeader_div_3_Template, 6, 6, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition == \"before\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx._isDisabled() || null)(\"aria-label\", ctx._intl.sortButtonLabel(ctx.id));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._renderArrow());\n      }\n    },\n    directives: [ɵngcc2.NgIf],\n    styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor;position:relative}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-button,[mat-sort-header].cdk-program-focused .mat-sort-header-button{border-bottom:solid 1px currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren]\n    },\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatSortHeader;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  MatSortHeader.ngAcceptInputType_disableClear;\n  /** @type {?} */\n\n  MatSortHeader.ngAcceptInputType_disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSortHeader.prototype._rerenderSubscription;\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype._showIndicatorHint;\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype._viewState;\n  /**\n   * The direction the arrow should be facing according to the current state.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype._arrowDirection;\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype._disableViewStateAnimation;\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype.id;\n  /**\n   * Sets the position of the arrow that displays when sorted.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype.arrowPosition;\n  /**\n   * Overrides the sort start value of the containing MatSort for this MatSortable.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype.start;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSortHeader.prototype._disableClear;\n  /** @type {?} */\n\n  MatSortHeader.prototype._intl;\n  /** @type {?} */\n\n  MatSortHeader.prototype._sort;\n  /** @type {?} */\n\n  MatSortHeader.prototype._columnDef;\n  /**\n   * @deprecated _focusMonitor and _elementRef to become required parameters.\n   * \\@breaking-change 10.0.0\n   * @type {?}\n   * @private\n   */\n\n  MatSortHeader.prototype._focusMonitor;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSortHeader.prototype._elementRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MatSortModule = /*#__PURE__*/(() => {\n  class MatSortModule {}\n\n  MatSortModule.ɵfac = function MatSortModule_Factory(t) {\n    return new (t || MatSortModule)();\n  };\n\n  MatSortModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatSortModule\n  });\n  MatSortModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n    imports: [[CommonModule]]\n  });\n  return MatSortModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSortModule, {\n    declarations: function () {\n      return [MatSort, MatSortHeader];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [MatSort, MatSortHeader];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-direction.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations }; //# sourceMappingURL=sort.js.map","map":null,"metadata":{},"sourceType":"module"}